{"ast":null,"code":"var _jsxFileName = \"/Users/sebasnadu/code/SebasNadu/react-complete-guide-ex/21-ReactRouterProject/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: data.events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    // status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    }); // This is the same as the above\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","resolve","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/sebasnadu/code/SebasNadu/react-complete-guide-ex/21-ReactRouterProject/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  return <Await resolve={data.events}></Await>;\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    // status: 500,\n    // });\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 }); // This is the same as the above\n  } else {\n    return response;\n  }\n}\n\nexport function loader() {\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAE5B,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,IAAI,CAACE;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAC9C;AAACP,EAAA,CAJQD,UAAU;EAAA,QACJP,aAAa;AAAA;AAAAgB,EAAA,GADnBT,UAAU;AAMnB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMnB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOrB,KAAK,CAAC;IACXS,MAAM,EAAEM,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}