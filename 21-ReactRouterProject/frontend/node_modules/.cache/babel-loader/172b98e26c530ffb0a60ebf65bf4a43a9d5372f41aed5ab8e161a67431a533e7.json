{"ast":null,"code":"var _jsxFileName = \"/Users/sebasnadu/code/SebasNadu/react-complete-guide-ex/21-ReactRouterProject/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData, json, redirect } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventList from \"../components/EventList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), \";\", /*#__PURE__*/_jsxDEV(EventList, {\n      events: data.events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function action(_ref2) {\n  let {\n    params,\n    request\n  } = _ref2;\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event.\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useRouteLoaderData","json","redirect","EventItem","EventList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvents","response","fetch","ok","message","status","resData","loader","_ref","request","params","id","eventId","action","_ref2","method","$RefreshReg$"],"sources":["/Users/sebasnadu/code/SebasNadu/react-complete-guide-ex/21-ReactRouterProject/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useRouteLoaderData, json, redirect } from \"react-router-dom\";\n\nimport EventItem from \"../components/EventItem\";\nimport EventList from \"../components/EventList\";\n\nfunction EventDetailPage() {\n  const data = useRouteLoaderData(\"event-detail\");\n\n  return (\n    <>\n      <EventItem event={data.event} />;\n      <EventList events={data.events} />\n    </>\n  );\n}\n\nexport default EventDetailPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\nexport async function loader({ request, params }) {\n  const id = params.eventId;\n\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n\n  if (!response.ok) {\n    throw json(\n      { message: \"Could not fetch details for selected event.\" },\n      { status: 500 }\n    );\n  } else {\n    return response;\n  }\n}\n\nexport async function action({ params, request }) {\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method,\n  });\n  if (!response.ok) {\n    throw json({ message: \"Could not delete event.\" }, { status: 500 });\n  }\n  return redirect(\"/events\");\n}\n"],"mappings":";;AAAA,SAASA,kBAAkB,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAErE,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAGX,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACEM,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACEN,OAAA,CAACH,SAAS;MAACU,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAChC,eAAAX,OAAA,CAACF,SAAS;MAACc,MAAM,EAAEP,IAAI,CAACO;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClC,CAAC;AAEP;AAACP,EAAA,CATQD,eAAe;EAAA,QACTT,kBAAkB;AAAA;AAAAmB,EAAA,GADxBV,eAAe;AAWxB,eAAeA,eAAe;AAE9B,eAAeW,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACpB,IAAI,CAAC,CAAC;IACrC,OAAOyB,OAAO,CAACR,MAAM;EACvB;AACF;AAEA,OAAO,eAAeS,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMG,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGS,EAAE,CAAC;EAElE,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CACR;MAAEuB,OAAO,EAAE;IAA8C,CAAC,EAC1D;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,eAAeY,MAAMA,CAAAC,KAAA,EAAsB;EAAA,IAArB;IAAEJ,MAAM;IAAED;EAAQ,CAAC,GAAAK,KAAA;EAC9C,MAAMF,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9B,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGU,OAAO,EAAE;IACtEG,MAAM,EAAEN,OAAO,CAACM;EAClB,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE;EACA,OAAOvB,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAiB,EAAA;AAAAiB,YAAA,CAAAjB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}